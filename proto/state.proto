syntax = "proto3";
package hat_game.state;

import "proto/error.proto";

message GameState {
  // Incremental state revision, first valid revision is 1
  uint32 rev = 1;
  map<fixed32, Player> players = 2;
  fixed32 host_id = 3;
  Settings settings = 4;
  oneof stage {
    Lobby lobby = 5;
    RunningGameState preparing = 6;
    RunningGameState start = 7;
    Round round = 8;
    RunningGameState finished = 9;
  }
}

message Player {
  PlayerStatus status = 1;
  string name = 2;
  string slug = 3;
  uint32 order = 4;
}

enum PlayerStatus {
  JOINING = 0;
  CONNECTED = 1;
  DISCONNECTED = 2;
}

message Settings {
  uint32 character_count = 1;
  uint32 minimal_players = 2;
  uint32 turn_duration_s = 3;
  uint32 vote_timeout_s = 4;
  uint32 start_timeout_s = 5;
  uint32 confirm_timeout_s = 6;
}

message Character {
  string title = 2;
  string description = 3;
}

message Lobby { map<fixed32, PlayerLobbyState> state = 1; }

message PlayerLobbyState { repeated Character value = 1; }

message RunningGameState {
  TeamList teams = 1;
  map<fixed64, Character> characters = 2;
  RoundPoints round_points = 3;
}

message RoundPoints { repeated PlayerPoints value = 1; }

message Team {
  fixed32 first_player_id = 1;
  fixed32 second_player_id = 2;
  TeamProps props = 3;
}

message TeamProps {
  string name = 1;
  uint32 style_id = 2;
}

message TeamList { repeated Team value = 1; }

message PlayerPoints { map<fixed32, CharacterIdList> value = 1; }

message CharacterIdList { repeated fixed64 characters = 1; }

message Round {
  uint32 round_index = 1;
  uint32 turn_index = 2;
  bool paused = 3;
  CharacterIdList character_pool = 4;
  PlayerPoints player_points = 5;
  RunningGameState state = 6;
  oneof turn_state {
    TurnOverview overview = 7;
    TurnPrepare prepare = 8;
    TurnActive active = 9;
    TurnVote vote = 10;
    TurnVoteCount vote_count = 11;
  }
}

message TurnOverview {}

message TurnPrepare {}

message TurnActive {}

message TurnVote {
  TurnEndReason reason = 1;
  CharacterIdList guessed = 2;
  map<fixed32, VoteResult> player_vote = 3;
}
enum TurnEndReason {
  TIMEOUT = 0;
  MANUAL = 1;
}

message VoteResult { repeated CharacterVote value = 1; }

message CharacterVote {
  fixed64 character_id = 1;
  CharacterVoteOutcome outcome = 2;
}

enum CharacterVoteOutcome {
  APPROVED = 0;
  REJECTED = 1;
}

message TurnVoteCount { VoteResult result = 1; }

message GameStatePatch {
  uint32 rev = 1;
  bool confirm = 2;
  oneof kind {
    DoPlayerJoined player_joined = 10;
    DoPlayerLeft player_left = 11;
    DoPlayerReady player_ready = 12;
    DoPlayerNotReady player_not_ready = 13;
    DoPlayerDisconnected player_disconnected = 14;
    DoPlayerConnected player_connected = 15;
    DoPrepareStart prepare_start = 16;
    DoStartGame start = 17;
    DoPause pause = 18;
    DoNextRound round_next = 19;
    DoNextTurn turn_next = 20;
    DoStartTurn turn_start = 21;
    DoEndTurn turn_end = 22;
    DoPlayerVoted vote_player = 23;
    DoVoteCount vote_count = 24;
    DoGameFinished game_finished = 25;
  };
}

message DoHandshake {
  oneof result {
    hat_game.error.Empty ok = 1;
    hat_game.error.ProtocolError err = 2;
  }
}

message DoGameClosed {}

message DoRewind { GameState state = 1; }

message DoPlayerJoined {
  fixed32 player_id = 1;
  Player player = 2;
}

message DoPlayerLeft { fixed32 player_id = 1; }

message DoPlayerReady {
  fixed32 player_id = 1;
  repeated Character characters = 2;
}

message DoPlayerNotReady { fixed32 player_id = 1; }

message DoPlayerDisconnected { fixed32 player_id = 1; }

message DoPlayerConnected { fixed32 player_id = 1; }

message DoPrepareStart { TeamList teams = 1; }

message DoPause { bool state = 1; }

message DoStartGame {}

message DoNextRound { uint32 round_index = 1; }

message DoNextTurn { uint32 turn_index = 1; }

message DoStartTurn {}

message DoEndTurn {
  TurnEndReason reason = 1;
  CharacterIdList guessed = 2;
}

message DoPlayerVoted {
  fixed32 player_id = 1;
  VoteResult result = 2;
}

message DoVoteCount { VoteResult result = 1; }

message DoGameFinished {}
